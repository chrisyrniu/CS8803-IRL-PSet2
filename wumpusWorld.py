
states = [(1,1), (1,2), (1,3), (1,4),
          (2,1), (2,2), (2,3), (2,4), 
          (3,1), (3,2), (3,3), (3,4),
          (4,1), (4,2), (4,3), (4,4)]
actions = ["up", "down", "left", "right", "stay"]
rewards = {(1,1): 0, (1,2): 0, (1,3): -1, (1,4): 0,
           (2,1): 0, (2,2): 0, (2,3): +1, (2,4): 0, 
           (3,1): -1, (3,2): 0, (3,3): -1, (3,4): 0,
           (4,1): 0, (4,2): 0, (4,3): 0, (4,4): -1}
p = 0.9
transitions = {(1,1): {"up": [[(1,2), p], [(1,1), (1-p)/2], [(2,1), (1-p)/2]], "right": [[(2,1), p], [(1,2), (1-p)/2], [(1,1), (1-p)/2]], "stay": [[(1,1), p], [(1,2), (1-p)/2], [(2,1), (1-p)/2]]},
               (1,2): {"up": [[(1,3), p], [(1,1), (1-p)/3], [(2,2), (1-p)/3], [(1,2), (1-p)/3]], "down": [[(1,1), p], [(1,3), (1-p)/3], [(2,2), (1-p)/3], [(1,2), (1-p)/3]], "right": [[(2,2), p], [(1,3), (1-p)/3], [(1,1), (1-p)/3], [(1,2), (1-p)/3]], "stay": [[(1,2), p], [(1,3), (1-p)/3], [(1,1), (1-p)/3], [(2,2), (1-p)/3]]},
               (1,3): None,
               (1,4): {"down": [[(1,3), p], [(1,4), (1-p)/2], [(2,4), (1-p)/2]], "right": [[(2,4), p], [(1,3), (1-p)/2], [(1,4), (1-p)/2]], "stay": [[(1,4), p], [(1,3), (1-p)/2], [(2,4), (1-p)/2]]},
               (2,1): {"up": [[(2,2), p], [(1,1), (1-p)/3], [(3,1), (1-p)/3], [(2,1), (1-p)/3]], "left": [[(1,1), p], [(2,2), (1-p)/3], [(3,1), (1-p)/3], [(2,1), (1-p)/3]], "right": [[(3,1), p], [(2,2), (1-p)/3], [(1,1), (1-p)/3], [(2,1), (1-p)/3]], "stay": [[(2,1), p], [(2,2), (1-p)/3], [(1,1), (1-p)/3], [(3,1), (1-p)/3]]},
               (2,2): {"up": [[(2,3), p], [(2,1), (1-p)/4], [(1,2), (1-p)/4], [(3,2), (1-p)/4], [(2,2), (1-p)/4]], "down": [[(2,1), p], [(2,3), (1-p)/4], [(1,2), (1-p)/4], [(3,2), (1-p)/4], [(2,2), (1-p)/4]], "left": [[(1,2), p], [(2,3), (1-p)/4], [(2,1), (1-p)/4], [(3,2), (1-p)/4], [(2,2), (1-p)/4]], "right": [[(3,2), p], [(2,3), (1-p)/4], [(2,1), (1-p)/4], [(1,2), (1-p)/4], [(2,2), (1-p)/4]], "stay":[[(2,2), p], [(2,3), (1-p)/4], [(2,1), (1-p)/4], [(1,2), (1-p)/4], [(3,2), (1-p)/4]]},
               (2,3): None,
               (2,4): {"down": [[(2,3), p], [(1,4), (1-p)/3], [(3,4), (1-p)/3], [(2,4), (1-p)/3]], "left": [[(1,4), p], [(2,3), (1-p)/3], [(3,4), (1-p)/3], [(2,4), (1-p)/3]], "right": [[(3,4), p], [(2,3), (1-p)/3], [(1,4), (1-p)/3], [(2,4), (1-p)/3]], "stay": [[(2,4), p], [(2,3), (1-p)/3], [(1,4), (1-p)/3], [(3,4), (1-p)/3]]},
               (3,1): None,
               (3,2): {"up": [[(3,3), p], [(3,1), (1-p)/4], [(2,2), (1-p)/4], [(4,2), (1-p)/4], [(3,2), (1-p)/4]], "down": [[(3,1), p], [(3,3), (1-p)/4], [(2,2), (1-p)/4], [(4,2), (1-p)/4], [(3,2), (1-p)/4]], "left": [[(2,2), p], [(3,3), (1-p)/4], [(3,1), (1-p)/4], [(4,2), (1-p)/4], [(3,2), (1-p)/4]], "right": [[(4,2), p], [(3,3), (1-p)/4], [(3,1), (1-p)/4], [(2,2), (1-p)/4], [(3,2), (1-p)/4]], "stay":[[(3,2), p], [(3,3), (1-p)/4], [(3,1), (1-p)/4], [(2,2), (1-p)/4], [(4,2), (1-p)/4]]},
               (3,3): None,
               (3,4): {"down": [[(3,3), p], [(2,4), (1-p)/3], [(4,4), (1-p)/3], [(3,4), (1-p)/3]], "left": [[(2,4), p], [(3,3), (1-p)/3], [(4,4), (1-p)/3], [(3,4), (1-p)/3]], "right": [[(4,4), p], [(3,3), (1-p)/3], [(2,4), (1-p)/3], [(3,4), (1-p)/3]], "stay": [[(3,4), p], [(3,3), (1-p)/3], [(2,4), (1-p)/3], [(4,4), (1-p)/3]]},
               (4,1): {"up": [[(4,2), p], [(3,1), (1-p)/2], [(4,1), (1-p)/2]], "left": [[(3,1), p], [(4,2), (1-p)/2], [(4,1), (1-p)/2]], "stay": [[(4,1), p], [(4,2), (1-p)/2], [(3,1), (1-p)/2]]},
               (4,2): {"up": [[(4,3), p], [(4,1), (1-p)/3], [(3,2), (1-p)/3], [(4,2), (1-p)/3]], "down": [[(4,1), p], [(4,3), (1-p)/3], [(3,2), (1-p)/3], [(4,2), (1-p)/3]], "left": [[(3,2), p], [(4,3), (1-p)/3], [(4,1), (1-p)/3], [(4,2), (1-p)/3]], "stay": [[(4,2), p], [(4,3), (1-p)/3], [(4,1), (1-p)/3], [(3,2), (1-p)/3]]},
               (4,3): {"up": [[(4,4), p], [(4,2), (1-p)/3], [(3,3), (1-p)/3], [(4,3), (1-p)/3]], "down": [[(4,2), p], [(4,4), (1-p)/3], [(3,3), (1-p)/3], [(4,3), (1-p)/3]], "left": [[(3,3), p], [(4,4), (1-p)/3], [(4,2), (1-p)/3], [(4,3), (1-p)/3]], "stay": [[(4,3), p], [(4,4), (1-p)/3], [(4,2), (1-p)/3], [(3,3), (1-p)/3]]},
               (4,4): None
               }

def reward(state1, action, state2):
	return rewards[state2]

def transition(state1, action, state2):
	try:
		for successor in transitions[state1][action]:
			if state2 == successor[0]:
				return successor[1]
	except:
		return 0

def get_successor(state, action):
	try:
		successors = []
		for successor in transitions[state][action]:
			successors.append(successor[0])
		return successors
	except:
		return None
